{"ast":null,"code":"import axios from \"axios\";\nimport { sessionService } from \"redux-react-session\";\nexport const loginUser = (credentials, history, setFieldError, setSubmitting) => {\n  // Make checks and get some data\n  return () => {\n    axios.post(\"https://whispering-headland-00232.herokuapp.com/user/signin\", credentials, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      const {\n        data\n      } = response;\n\n      if (data.status === \"FAILED\") {\n        const {\n          message\n        } = data; // check for specific error\n\n        if (message.includes(\"credentials\")) {\n          setFieldError(\"email\", message);\n          setFieldError(\"password\", message);\n        } else if (message.includes(\"password\")) {\n          setFieldError(\"password\", message);\n        }\n      } else if (data.status === \"SUCCESS\") {\n        const userData = data.data[0];\n        const token = userData._id;\n        sessionService.saveSession(token).then(() => {\n          sessionService.saveUser(userData).then(() => {\n            history.push(\"/dashboard\");\n          }).catch(err => console.error(err));\n        }).catch(err => console.error(err));\n      } //complete submission\n\n\n      setSubmitting(false);\n    }).catch(err => console.error(err));\n  };\n};\nexport const signupUser = (credentials, history, setFieldError, setSubmitting) => {\n  return dispatch => {\n    axios.post(\"https://whispering-headland-00232.herokuapp.com/user/signup\", credentials, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      const {\n        data\n      } = response;\n\n      if (data.status === \"FAILED\") {\n        const {\n          message\n        } = data; // checking for specific error\n\n        if (message.includes(\"name\")) {\n          setFieldError(\"name\", message);\n        } else if (message.includes(\"email\")) {\n          setFieldError(\"email\", message);\n        } else if (message.includes(\"date\")) {\n          setFieldError(\"dateOfBirth\", message);\n        } else if (message.includes(\"password\")) {\n          setFieldError(\"password\", message);\n        } // complete submission\n\n\n        setSubmitting(false);\n      } else if (data.status === \"SUCCESS\") {\n        // Login user after successful signup\n        const {\n          email,\n          password\n        } = credentials;\n        dispatch(loginUser({\n          email,\n          password\n        }, history, setFieldError, setSubmitting));\n      }\n    }).catch(err => console.error(err));\n  };\n};\nexport const logoutUser = history => {\n  return () => {\n    sessionService.deleteSession();\n    sessionService.deleteUser();\n    history.push('/');\n  };\n};","map":{"version":3,"sources":["/Users/marlonfalcon/Desktop/ttpc_login/src/auth/actions/userActions.js"],"names":["axios","sessionService","loginUser","credentials","history","setFieldError","setSubmitting","post","headers","then","response","data","status","message","includes","userData","token","_id","saveSession","saveUser","push","catch","err","console","error","signupUser","dispatch","email","password","logoutUser","deleteSession","deleteUser"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { sessionService } from \"redux-react-session\";\r\n\r\nexport const loginUser = (\r\n  credentials,\r\n  history,\r\n  setFieldError,\r\n  setSubmitting\r\n) => {\r\n  // Make checks and get some data\r\n\r\n  return () => {\r\n\r\n  axios\r\n    .post(\r\n      \"https://whispering-headland-00232.herokuapp.com/user/signin\",\r\n      credentials,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    )\r\n    .then((response) => {\r\n      const { data } = response;\r\n\r\n      if (data.status === \"FAILED\") {\r\n        const { message } = data;\r\n\r\n        // check for specific error\r\n        if (message.includes(\"credentials\")) {\r\n          setFieldError(\"email\", message);\r\n          setFieldError(\"password\", message);\r\n        } else if (message.includes(\"password\")) {\r\n          setFieldError(\"password\", message);\r\n        }\r\n      } else if (data.status === \"SUCCESS\") {\r\n        const userData = data.data[0];\r\n\r\n        const token = userData._id;\r\n\r\n        sessionService\r\n          .saveSession(token)\r\n          .then(() => {\r\n            sessionService\r\n              .saveUser(userData)\r\n              .then(() => {\r\n                history.push(\"/dashboard\");\r\n              })\r\n              .catch((err) => console.error(err));\r\n          })\r\n          .catch((err) => console.error(err));\r\n      }\r\n\r\n      //complete submission\r\n      setSubmitting(false);\r\n    })\r\n    .catch((err) => console.error(err));\r\n\r\n}\r\n};\r\n\r\nexport const signupUser = (\r\n  credentials,\r\n  history,\r\n  setFieldError,\r\n  setSubmitting\r\n) => {\r\n\r\n    return (dispatch) => {\r\n  axios\r\n    .post(\r\n      \"https://whispering-headland-00232.herokuapp.com/user/signup\",\r\n      credentials,\r\n      {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    )\r\n    .then((response) => {\r\n      const { data } = response;\r\n\r\n      if (data.status === \"FAILED\") {\r\n        const { message } = data;\r\n\r\n        // checking for specific error\r\n        if (message.includes(\"name\")) {\r\n          setFieldError(\"name\", message);\r\n        } else if (message.includes(\"email\")) {\r\n          setFieldError(\"email\", message);\r\n        } else if (message.includes(\"date\")) {\r\n          setFieldError(\"dateOfBirth\", message);\r\n        } else if (message.includes(\"password\")) {\r\n          setFieldError(\"password\", message);\r\n        }\r\n\r\n        // complete submission\r\n        setSubmitting(false);\r\n      } else if (data.status === \"SUCCESS\") {\r\n        // Login user after successful signup\r\n        const { email, password } = credentials;\r\n\r\n        dispatch(\r\n          loginUser({ email, password }, history, setFieldError, setSubmitting)\r\n        );\r\n      }\r\n    })\r\n    .catch((err) => console.error(err));\r\n\r\n}\r\n};\r\n\r\nexport const logoutUser = (history) => {\r\n    return () => {\r\n        sessionService.deleteSession();\r\n        sessionService.deleteUser();\r\n        history.push('/');\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}